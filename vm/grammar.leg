%{
#include <stdio.h>
#include "vl.h"
#define YYSTYPE OBJ

static char *charbuf;
static VlVM *yyvm;

#define YY_INPUT(buf, result, max_size) { \
  int yyc; \
  if (charbuf && *charbuf != '\0' && charbuf != NULL) \
     yyc = *charbuf++; \
  else if (charbuf == NULL) \
     yyc = getchar(); \
  else \
     yyc = EOF; \
  result = (EOF == yyc) ? 0 : (*(buf) = yyc, 1); \
}

%}

Root = s:Stmts EOF { COMPILE(yyvm, s) }

Stmts = SEP*
        - head:Stmt Comment?            { head = NODES(head) }
        ( SEP - tail:Stmt Comment?      { PUSH_NODE(head, tail) }
        | SEP - Comment
        )* SEP?                         { $$ = head }
      | SEP+                            { $$ = VlArray_new2(0) }

Stmt = Assign
     | Call
     | Value

Value  = v:NUMBER               { $$ = NODE(VALUE, v) }
       | v:CONST                { $$ = NODE(CONST, v); }

Assign = name:ID - ASSIGN - val:Stmt { $$ = NODE2(ASSIGN, name, val) }
       | name:CONST - ASSIGN - val:Stmt { $$ = NODE2(SETCONST, name, val) }

Call   = msg:ID { $$ = NODE(SEND, msg) }
       | msg:CONST { $$ = NODE(GETCONST, msg) }

Comment = - '#' (!EOL .)*

NAME   = [a-zA-Z0-9_]+
ID     = < [a-z_] NAME? ( '!' | '?' )? > { $$ = VlSymbol_new(yyvm, yytext); }
CONST  = < [A-Z] NAME? > { $$ = VlSymbol_new(yyvm, yytext); }
NUMBER = < [0-9]+ > { printf("CREATING NUMBER %d\n", atoi(yytext)); $$ = atoi(yytext); }
ASSIGN = < '=' > &(!'=') { $$ = VlSymbol_new(yyvm, yytext); }

-      = [ \t]*
EOL    = ( '\n' | '\r\n' | '\r' )
SEP    = ( - (EOL | ';') )+
EOF    = !.

%%

void VlBlock_compile(char *code) {
     yyvm = VlVM_new();
     charbuf = code;
     
     if (code == NULL) {
        while(yyparse()) {
           printf("> ");
        };
     } else {
          if (!yyparse()) {
             //yyerror();
          }
     }
}

/*int main()
{
        printf("> ");
        while (yyparse()) {
              printf("> ");
        }
        return 0;
}*/
